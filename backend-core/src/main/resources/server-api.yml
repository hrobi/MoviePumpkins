# GLOSSARY:
#  ES <- Error Status
#  ESC400R <- Error Status Code 400 Response

openapi: 3.0.2
info:
  version: '1.0.0'
  title: net.moviepumpkins.core
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

paths:
  '/spec':
    get:
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Specification'
  '/users':
    post:
      operationId: createOwnUser
      security:
        - bearerAuth: [ ]
      responses:
        '201':
          description: user successfully created their own user account
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/UserProfile"
        '200':
          description: request was accepted, but user account already exists
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/UserProfile"
        '401':
          description: user needs to be authenticated for this operation
  '/users/{username}/profile':
    put:
      operationId: updateUserProfile
      security:
        - bearerAuth: [ ]
      parameters:
        - name: username
          schema:
            type: string
          required: true
          description: search by username
          in: path
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserProfileRequest'
      responses:
        '401':
          description: user must be logged in to modify the profile
        '403':
          description: user is not authorized to modify this profile!
        '400':
          description: request body is incorrect
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        '204':
          description: profile modified successfully
    get:
      operationId: getUserProfile
      parameters:
        - name: username
          schema:
            type: string
          required: true
          description: search by username
          in: path
      responses:
        '200':
          description: user successfully got back attributes of a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '404':
          description: user with username couldn't be found
  /media/{id}:
    get:
      operationId: getMediaById
      parameters:
        - name: id
          schema:
            type: integer
            format: int64
          required: true
          in: path
      responses:
        '200':
          description: media is found and returned successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMediaResponse"
        '404':
          description: media cannot be found
  /media/{id}/poster:
    get:
      operationId: getMediaPosterById
      parameters:
        - name: id
          schema:
            type: integer
            format: int64
          required: true
          in: path
      responses:
        '200':
          description: media poster is found and returned successfully
          content:
            image/jpg:
              schema:
                type: string
                format: binary
        '410':
          description: the media id is correct, but there is no poster uploaded
        '404':
          description: media cannot be found
  /media-modifications/:
    post:
      operationId: createMediaModification
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - details
              properties:
                details:
                  $ref: "#/components/schemas/CreateMediaModificationRequest"
                poster:
                  type: string
                  format: binary
            encoding:
              poster:
                contentType: image/*
              details:
                contentType: application/json
      responses:
        '201':
          description: media modification successfully created
        '409':
          description: media modification already exists by user
        '401':
          description: user needs to be logged in
        '404':
          description: media does not exist
  /media-modifications/{id}:
    delete:
      operationId: deleteMediaModification
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          schema:
            type: integer
            format: int64
          required: true
      responses:
        '204':
          description: modification deleted successfully
        '401':
          description: login required
        '403':
          description: no right to delete, user either has to be admin or the author of the modification
    put:
      operationId: updateMediaModification
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          schema:
            type: integer
            format: int64
          required: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - details
              properties:
                details:
                  $ref: "#/components/schemas/UpdateMediaModificationRequest"
                poster:
                  type: string
                  format: binary
            encoding:
              poster:
                contentType: image/*
              details:
                contentType: application/json
      responses:
        '204':
          description: update was successful
        '401':
          description: user needs to be logged in
        '403':
          description: user is not the one making the original modification
        '404':
          description: modification does not exist
  /media/{id}/reviews:
    get:
      operationId: getReviewsByPageOrCreator
      parameters:
        - name: id
          in: path
          schema:
            type: integer
            format: int64
          required: true
        - name: page
          in: query
          schema:
            type: integer
          required: false
        - name: creator
          in: query
          schema:
            type: string
          required: false
      responses:
        200:
          description: reviews returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GetReviewResponse"
        404:
          description: media does not exist
    put:
      operationId: saveReview
      parameters:
        - name: id
          in: path
          schema:
            type: integer
            format: int64
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SaveReviewRequest"
      responses:
        200:
          description: review created or modified
        400:
          description: review content is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        401:
          description: user needs to be logged in
        404:
          description: media doesn't exist
  /reviews/{id}:
    delete:
      operationId: deleteReview
      parameters:
        - name: id
          in: path
          schema:
            type: integer
            format: int64
          required: true
      responses:
        204:
          description: review deleted successfully
        403:
          description: user either has to be the original creator, a supervisor or an admin
        401:
          description: login is required
        404:
          description: review couldn't be found
  /reviews/{id}/rate:
    put:
      operationId: saveReviewRating
      parameters:
        - name: id
          in: path
          schema:
            type: integer
            format: int64
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SaveReviewRatingRequest"
      responses:
        204:
          description: review rated successfully
        404:
          description: review does not exist
        401:
          description: login is required

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    Authorization:
      in: header
      name: Authorization
      schema:
        type: string
      required: true
  schemas:
    Specification:
      type: object
      required:
        - version
        - license
        - apiTitle
      properties:
        version:
          type: string
          pattern: '\d+\.\d+\.\d+'
        license:
          type: object
          required:
            - name
            - url
          properties:
            name:
              type: string
            url:
              type: string
        apiTitle:
          type: string
    UserProfile:
      type: object
      required:
        - username
        - fullName
        - email
        - displayName
        - role
      properties:
        username:
          type: string
        fullName:
          type: string
        email:
          type: string
        displayName:
          type: string
        role:
          $ref: '#/components/schemas/UserRole'
    UpdateUserProfileRequest:
      type: object
      required:
        - fullName
        - email
        - displayName
      properties:
        fullName:
          type: string
        email:
          type: string
        displayName:
          type: string
    UserRole:
      type: string
      enum:
        - reviewer
        - supervisor
        - admin
    BadRequestBodyError:
      type: object
      required:
        - field
        - reason
      properties:
        field:
          type: string
        reason:
          type: string
    BadRequestResponse:
      type: object
      required:
        - violations
      properties:
        violations:
          type: array
          items:
            $ref: "#/components/schemas/BadRequestBodyError"
    GetMediaResponse:
      type: object
      required:
        - id
        - type
        - title
        - description
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
        title:
          type: string
        description:
          type: string
        directors:
          type: array
          items:
            type: string
        writers:
          type: array
          items:
            type: string
        actors:
          type: array
          items:
            type: string
        originalTitle:
          type: string
        countries:
          type: array
          items:
            type: string
        awards:
          type: array
          items:
            type: string
            example: "6 oscars"
        totalWins:
          type: integer
        totalNominations:
          type: integer
        posterLink:
          type: string
      discriminator:
        propertyName: type
        mapping:
          movie: "#/components/schemas/GetMovieResponse"
          series: "#/components/schemas/GetSeriesResponse"
    GetMovieResponse:
      allOf:
        - $ref: "#/components/schemas/GetMediaResponse"
        - type: object
          required:
            - releaseYear
          properties:
            releaseYear:
              type: integer
            lengthInMinutes:
              type: integer
    GetSeriesResponse:
      allOf:
        - $ref: "#/components/schemas/GetMediaResponse"
        - type: object
          required:
            - startedInYear
          properties:
            seasons:
              type: integer
            startedInYear:
              type: integer
            endedInYear:
              type: integer
    GenericMediaModification:
      type: object
      required:
        - mediaId
      properties:
        title:
          type: string
        description:
          type: string
        directors:
          type: array
          items:
            type: string
        writers:
          type: array
          items:
            type: string
        actors:
          type: array
          items:
            type: string
        originalTitle:
          type: string
        countries:
          type: array
          items:
            type: string
        awards:
          type: array
          items:
            type: string
            example: "6 oscars"
        totalWins:
          type: integer
        totalNominations:
          type: integer
    CreateMediaModificationRequest:
      allOf:
        - $ref: "#/components/schemas/GenericMediaModification"
        - type: object
          required:
            - mediaId
          properties:
            mediaId:
              type: integer
              format: int64
      discriminator:
        propertyName: mediaType
        mapping:
          movie: "#/components/schemas/CreateMovieModificationRequest"
          series: "#/components/schemas/CreateSeriesModificationRequest"
    UpdateMediaModificationRequest:
      allOf:
        - $ref: "#/components/schemas/GenericMediaModification"
      discriminator:
        propertyName: mediaType
        mapping:
          movie: "#/components/schemas/UpdateMovieModificationRequest"
          series: "#/components/schemas/UpdateSeriesModificationRequest"
    GenericAdditionalMovieDetails:
      type: object
      properties:
        releaseYear:
          type: integer
        lengthInMinutes:
          type: integer
    GenericAdditionalSeriesDetails:
      type: object
      properties:
        seasons:
          type: integer
        startedInYear:
          type: integer
        endedInYear:
          type: integer
    CreateMovieModificationRequest:
      allOf:
        - $ref: "#/components/schemas/CreateMediaModificationRequest"
        - $ref: "#/components/schemas/GenericAdditionalMovieDetails"
    CreateSeriesModificationRequest:
      allOf:
        - $ref: "#/components/schemas/CreateMediaModificationRequest"
        - $ref: "#/components/schemas/GenericAdditionalSeriesDetails"
    UpdateMovieModificationRequest:
      allOf:
        - $ref: "#/components/schemas/UpdateMediaModificationRequest"
        - $ref: "#/components/schemas/GenericAdditionalMovieDetails"
    UpdateSeriesModificationRequest:
      allOf:
        - $ref: "#/components/schemas/UpdateMediaModificationRequest"
        - $ref: "#/components/schemas/GenericAdditionalSeriesDetails"
    # reviews
    GetReviewResponse:
      type: object
      required:
        - user
        - title
        - content
        - spoilerFree
        - createdAt
        - modifiedAt
        - likes
        - dislikes
      properties:
        user:
          $ref: "#/components/schemas/UserProfile"
        title:
          type: string
        content:
          type: string
        spoilerFree:
          type: boolean
        createdAt:
          type: string
          format: date-time
        modifiedAt:
          type: string
          format: date-time
        likes:
          type: integer
        dislikes:
          type: integer
    SaveReviewRequest:
      type: object
      required:
        - title
        - content
        - spoilerFree
      properties:
        title:
          type: string
        content:
          type: string
        spoilerFree:
          type: boolean
    SaveReviewRatingRequest:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - LIKE
            - DISLIKE
            - NO_RATING